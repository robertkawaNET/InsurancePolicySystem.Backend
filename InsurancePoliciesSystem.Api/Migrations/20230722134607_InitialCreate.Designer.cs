// <auto-generated />
using System;
using InsurancePoliciesSystem.Api.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InsurancePoliciesSystem.Api.Migrations
{
    [DbContext(typeof(IpsDbContext))]
    [Migration("20230722134607_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("InsurancePoliciesSystem.Api.BackOffice.Agreements.Domain.Agreement", b =>
                {
                    b.Property<Guid>("AgreementId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AgreementId");

                    b.Property<string>("AgreementText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AgreementText");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit")
                        .HasColumnName("IsRequired");

                    b.Property<string>("Package")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Package");

                    b.HasKey("AgreementId");

                    b.ToTable("Agreement", "Agreements");
                });

            modelBuilder.Entity("InsurancePoliciesSystem.Api.SellPolicies.InsurancePackages.IndividualTravelInsurance.App.PriceCOnfiguration.PriceConfigurationItemDto", b =>
                {
                    b.Property<int>("InsuranceSum")
                        .HasColumnType("int");

                    b.Property<decimal>("Adventure")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Essential")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Relax")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("InsuranceSum");

                    b.ToTable("PriceConfiguration", "IndividualTravelInsurance");
                });

            modelBuilder.Entity("InsurancePoliciesSystem.Api.SellPolicies.InsurancePackages.IndividualTravelInsurance.Domain.IndividualTravelInsurancePolicy", b =>
                {
                    b.Property<Guid>("PolicyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PolicyId");

                    b.Property<string>("AgreementsIds")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AgreementsIds");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateDate");

                    b.Property<string>("PolicyNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PolicyNumber");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.HasKey("PolicyId");

                    b.ToTable("Policy", "IndividualTravelInsurance");
                });

            modelBuilder.Entity("InsurancePoliciesSystem.Api.SellPolicies.InsurancePackages.WorkInsurance.App.PriceConfiguration.PriceConfigurationItemDto", b =>
                {
                    b.Property<int>("InsuranceSum")
                        .HasColumnType("int");

                    b.Property<decimal>("Basic")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Max")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Plus")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("InsuranceSum");

                    b.ToTable("PriceConfiguration", "WorkInsurance");
                });

            modelBuilder.Entity("InsurancePoliciesSystem.Api.SellPolicies.InsurancePackages.WorkInsurance.Domain.Person", b =>
                {
                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PersonId");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FirstName");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LastName");

                    b.Property<Guid?>("WorkInsurancePolicyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PersonId");

                    b.HasIndex("WorkInsurancePolicyId");

                    b.ToTable("Persons", "WorkInsurance");
                });

            modelBuilder.Entity("InsurancePoliciesSystem.Api.SellPolicies.InsurancePackages.WorkInsurance.Domain.WorkInsurancePolicy", b =>
                {
                    b.Property<Guid>("PolicyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PolicyId");

                    b.Property<string>("AgreementsIds")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AgreementsIds");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateDate");

                    b.Property<string>("PolicyNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PolicyNumber");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.HasKey("PolicyId");

                    b.ToTable("Policy", "WorkInsurance");
                });

            modelBuilder.Entity("InsurancePoliciesSystem.Api.SellPolicies.SearchPolicies.Domain.SearchPolicy", b =>
                {
                    b.Property<Guid>("PolicyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PolicyId");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateDate");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("datetime2")
                        .HasColumnName("DateFrom");

                    b.Property<DateTime>("DateTo")
                        .HasColumnType("datetime2")
                        .HasColumnName("DateTo");

                    b.Property<string>("Package")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Package");

                    b.Property<string>("PolicyNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PolicyNumber");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Price");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.HasKey("PolicyId");

                    b.ToTable("SearchPolicy", (string)null);
                });

            modelBuilder.Entity("InsurancePoliciesSystem.Api.SellPolicies.InsurancePackages.IndividualTravelInsurance.Domain.IndividualTravelInsurancePolicy", b =>
                {
                    b.OwnsOne("InsurancePoliciesSystem.Api.SellPolicies.InsurancePackages.IndividualTravelInsurance.Domain.Policyholder", "Policyholder", b1 =>
                        {
                            b1.Property<Guid>("IndividualTravelInsurancePolicyPolicyId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("City");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Email");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("FirstName");

                            b1.Property<string>("FlatNumber")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("FlatNumber");

                            b1.Property<string>("HouseNumber")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("HouseNumber");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("LastName");

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("PhoneNumber");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("PostalCode");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Street");

                            b1.HasKey("IndividualTravelInsurancePolicyPolicyId");

                            b1.ToTable("Policy", "IndividualTravelInsurance");

                            b1.WithOwner()
                                .HasForeignKey("IndividualTravelInsurancePolicyPolicyId");
                        });

                    b.OwnsOne("InsurancePoliciesSystem.Api.SellPolicies.InsurancePackages.IndividualTravelInsurance.Domain.Variant", "Variant", b1 =>
                        {
                            b1.Property<Guid>("IndividualTravelInsurancePolicyPolicyId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Country");

                            b1.Property<DateTime>("DateFrom")
                                .HasColumnType("datetime2")
                                .HasColumnName("DateFrom");

                            b1.Property<DateTime>("DateTo")
                                .HasColumnType("datetime2")
                                .HasColumnName("DateTo");

                            b1.Property<int>("InsuranceSum")
                                .HasColumnType("int")
                                .HasColumnName("InsuranceSum");

                            b1.Property<decimal>("PricePerDay")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("PricePerDay");

                            b1.Property<int>("SelectedPackage")
                                .HasColumnType("int")
                                .HasColumnName("SelectedPackage");

                            b1.Property<decimal>("TotalPrice")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("TotalPrice");

                            b1.HasKey("IndividualTravelInsurancePolicyPolicyId");

                            b1.ToTable("Policy", "IndividualTravelInsurance");

                            b1.WithOwner()
                                .HasForeignKey("IndividualTravelInsurancePolicyPolicyId");
                        });

                    b.Navigation("Policyholder")
                        .IsRequired();

                    b.Navigation("Variant")
                        .IsRequired();
                });

            modelBuilder.Entity("InsurancePoliciesSystem.Api.SellPolicies.InsurancePackages.WorkInsurance.Domain.Person", b =>
                {
                    b.HasOne("InsurancePoliciesSystem.Api.SellPolicies.InsurancePackages.WorkInsurance.Domain.WorkInsurancePolicy", null)
                        .WithMany("Persons")
                        .HasForeignKey("WorkInsurancePolicyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("InsurancePoliciesSystem.Api.SellPolicies.InsurancePackages.WorkInsurance.Domain.WorkInsurancePolicy", b =>
                {
                    b.OwnsOne("InsurancePoliciesSystem.Api.SellPolicies.InsurancePackages.WorkInsurance.Domain.Policyholder", "Policyholder", b1 =>
                        {
                            b1.Property<Guid>("WorkInsurancePolicyPolicyId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("City");

                            b1.Property<string>("CompanyName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("CompanyName");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Email");

                            b1.Property<string>("FlatNumber")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("FlatNumber");

                            b1.Property<string>("HouseNumber")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("HouseNumber");

                            b1.Property<string>("Nip")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Nip");

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("PhoneNumber");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("PostalCode");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Street");

                            b1.HasKey("WorkInsurancePolicyPolicyId");

                            b1.ToTable("Policy", "WorkInsurance");

                            b1.WithOwner()
                                .HasForeignKey("WorkInsurancePolicyPolicyId");
                        });

                    b.OwnsOne("InsurancePoliciesSystem.Api.SellPolicies.InsurancePackages.WorkInsurance.Domain.Variant", "Variant", b1 =>
                        {
                            b1.Property<Guid>("WorkInsurancePolicyPolicyId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("DateFrom")
                                .HasColumnType("datetime2")
                                .HasColumnName("DateFrom");

                            b1.Property<DateTime>("DateTo")
                                .HasColumnType("datetime2")
                                .HasColumnName("DateTo");

                            b1.Property<int>("InsuranceSum")
                                .HasColumnType("int")
                                .HasColumnName("InsuranceSum");

                            b1.Property<int>("NumberOfPeople")
                                .HasColumnType("int")
                                .HasColumnName("NumberOfPeople");

                            b1.Property<decimal>("PricePerPerson")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("PricePerPerson");

                            b1.Property<int>("SelectedPackage")
                                .HasColumnType("int")
                                .HasColumnName("SelectedPackage");

                            b1.Property<decimal>("TotalPrice")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("TotalPrice");

                            b1.HasKey("WorkInsurancePolicyPolicyId");

                            b1.ToTable("Policy", "WorkInsurance");

                            b1.WithOwner()
                                .HasForeignKey("WorkInsurancePolicyPolicyId");
                        });

                    b.Navigation("Policyholder")
                        .IsRequired();

                    b.Navigation("Variant")
                        .IsRequired();
                });

            modelBuilder.Entity("InsurancePoliciesSystem.Api.SellPolicies.InsurancePackages.WorkInsurance.Domain.WorkInsurancePolicy", b =>
                {
                    b.Navigation("Persons");
                });
#pragma warning restore 612, 618
        }
    }
}
